 Arquitetura de Software
modelo arquitetural baseado em camadas que organizar√° nosso c√≥digo em tr√™s camadas:
 a Model, a Service e a Controller

Model: Essa camada tem como responsabilidade acomodar todo c√≥digo capaz de acessar dados sejam
 eles em um banco de dados ou no sistema de arquivos. Dessa forma as demais camadas n√£o 
 necessitam saber de qual banco de dados, por exemplo, os dados est√£o sendo armazenados ou 
 recuperados, ou seja, se utilizarmos um MySQL, um PostgreSQL ou at√© mesmo um MongoDB, 
 os c√≥digos acomodados nas camadas Service e Controller n√£o necessitam conhecer esses detalhes;

Service: Essa camada tem como responsabilidade validar as regras de neg√≥cio de uma aplica√ß√£o. 
Imagine uma API REST que realize o gerenciamento de um almoxarifado e que existe uma regra que 
diz que deve ser enviado um email para o setor de compras da empresa quando o estoque de um determinado
 produto estiver abaixo de uma quantidade m√≠nima. C√≥digos que cont√™m regras desse tipo ser√£o 
 acomodados na camada Service;

Controller: Essa camada tem como responsabilidade validar os valores recebidos de um cliente 
da aplica√ß√£o. Esses valores podem ser, por exemplo, um JSON dentro do corpo da requisi√ß√£o HTTP,
 par√¢metros de requisi√ß√£o, entre outros.


 agora:

git clone git@github.com:tryber/msc-architecture-trybecar.git
cd msc-architecture-trybecar
git checkout complex-application


A camada Model tem como responsabilidade acomodar as entidades da nossa aplica√ß√£o. Como assim? ü§î

Quando os endpoints da API trybecar foram apresentados, tr√™s entidades foram mencionadas:
 pessoa motorista
 pessoa passageira
 viagem
As a√ß√µes que a API fornece atrav√©s dos endpoints se referem a essas entidades, ou seja,
 toda vez que uma a√ß√£o √© disparada atrav√©s da API, ela atuar√° sobre os dados armazenados 
 de pelo menos uma das entidades relacionadas.

Na API trybecar os dados das entidades est√£o sendo armazenados em um banco de
 dados MySQL e a camada Model fornece uma maneira unificada de acessar esses dados.
  Dessa forma, quando qualquer outra parte da aplica√ß√£o necessitar dos dados de alguma entidade,
  existir√° um Model que ir√° fornecer esses dados de maneira padronizada.

A principal vantagem de utilizarmos a camada Model √© a de unificar o acesso aos dados, evitando a 
duplica√ß√£o de c√≥digo relacionado ao acesso a dados.

======================
Implementando um CRUD do zero - Parte 1 - Camada Model

git clone git@github.com:tryber/msc-architecture-trybecar.git
cd msc-architecture-trybecar
git checkout complex-application


docker-compose up -d

docker exec -it trybecar bash
npm install
npm run debug