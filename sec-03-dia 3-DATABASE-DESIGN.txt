1 Identificando entidades, atributos e relacionamentos
==================================

Entidades(Tabela)
São uma representação de algo do mundo real dentro do banco de dados e que normalmente englobam toda uma ideia. 
São armazenadas em formato de tabelas em um banco de dados.

Banco de dados: Catálogo musical

Entidade 1: Álbum;
Entidade 2: Artista;
Entidade 3: Estilo Musical;
Entidade 4: Canção.
==================================

Atributos(Coluna)
Um atributo é tudo aquilo que pode ser usado para descrever algo. Por exemplo,
 uma entidade pessoa pode ter nome, altura, peso e idade como atributos.

Álbum: album_id, titulo, preco, estilo_id e artista_id;
Artista: artista_id e nome;
Estilo Musical: estilo_id e nome;
Canção: cancao_id, nome e album_id.
===========================

Relacionamentos

Os relacionamentos servem para representar como uma entidade deve estar ligada com outra(s)
 no banco de dados. Há três tipos de relacionamentos possíveis em um banco de dados, são eles:

Relacionamento Um para Um (1..1);
Relacionamento Um para Muitos ou Muitos para Um (1..N);
Relacionamento Muitos para Muitos (N..N).


-- Tabelas Artista e Album:

As tabelas Artista e Album possuem um relacionamento de um para muitos (1..N),
 em que um artista pode possuir um ou mais álbuns.

-- Tabelas Album e Cancao:

A tabela Album possui um relacionamento de um para muitos (1..N) com a tabela Cancao,
 uma vez que um álbum pode conter várias canções.

-- Tabelas Album e EstiloMusical:

A tabela EstiloMusical também possui um relacionamento de um para muitos (1..N) com a tabela 
Album, uma vez que um estilo musical pode estar contido em vários álbuns.

=======================================

CRIANDO BANCO DE DADOS:

-- Cria um banco de dados com o nome especificado.
CREATE DATABASE nome_do_banco_de_dados;

-- `CREATE DATABASE` ou `CREATE SCHEMA` fazem a mesma coisa.
CREATE SCHEMA nome_do_banco_de_dados;

-- Verifica se o banco de dados ainda não existe.
-- Essa verificação é comumente utilizada junto ao CREATE DATABASE para evitar
-- a tentativa de criar um banco de dados duplicado, o que ocasionaria um erro.
IF NOT EXISTS nome_do_banco_de_dados;

-- Lista todos os bancos de dados existentes.
SHOW DATABASES;

-- Define o banco de dados ativo para uso no momento.
USE nome_do_banco_de_dados;

===============

tipos de dados :

BOOL 1 ou 0 (true or false)
-----------------------
CARACTERES
Tamanho fixo:
CHAR(5) PERMITE INSERIR ATÉ UMA QUANTIDADE DE CARACTERES E SEMPRE OCUPA TODO ESPAÇO RESERVADO- NO MÁXIMO x(5) POSIÇÕES(CHAR(5))

Variavel:
VARCHAR(10) PERMITE INSERIR ATÉ ESSA QUANTIDADE DE CARACTERES Q FOR DEFINIDA 
MAS SÓ OCUPA O ESPAÇO Q FOR PREENCHIDO
-------------------
NÚMEROS:
Valores Exatos inteiros
-tinyint = 0 a 255 UNSIGNED ou -128 a 127 SIGNED
UNSIGNED permite armazenar apenas valores positivos
SIGNED permite armazenar  valores positivos e valores negativos

SMALLLINT
MEDIUMINT
INT
BIGINT

Valores Exatos com valores decimais
DECIMAL - permite definir a quantidade máxima de numeros e sua precisão
EX: DECIMAL(5,2) = 199.99

FLOAT ou REAL - TEM A PRECISÃO DE UMA CASA DECIMAL
EX: 10.9

DOUBLE TEM A PRECISAO DE 2 CASAS DECIMAIS 
EX: 20.99
------------

TEMPORAIS:
DATE
TIME
YEAR

DATETIME - junta date e time em um valor
TIMESTAMP - IGUAL AO DATE TIME MAS TAMBÉM  OPERA COM BASE NO FUSO HORÁRIO QUE PODE SER DEFINIDO NO SERVIDOR
========================
CHAVE COMPOSTA

  DROP SCHEMA IF EXISTS brasil;
  CREATE SCHEMA brasil;
  USE brasil;

  CREATE TABLE cidades(
    cidade VARCHAR(100) NOT NULL,
    estado VARCHAR(10) NOT NULL,
    populacao INTEGER,
    CONSTRAINT PRIMARY KEY(cidade, estado)
  );

  INSERT INTO cidades(cidade, estado, populacao)
  VALUES('Rio Claro','SP',185421),
    ('Rio Claro','RJ',17216);

==========

CONVERTER PARA CHAVE SIMPLES

  -- Apagar a versão antiga da tabela
  DROP TABLE cidades;

  -- Cria uma tabela
  CREATE TABLE cidades(
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  cidade VARCHAR(100) NOT NULL,
  estado VARCHAR(10) NOT NULL,
  populacao INTEGER
  );

  -- Insere os dados na tabela
  INSERT INTO cidades(cidade, estado, populacao)
  VALUES('Rio Claro','SP',185421),
  ('Rio Claro','RJ',17216);

  =========

  -- Há muitas formas de grafia existentes, mas para manter uma padronização e seguirmos
   a boa prática adotaremos a notação em "snake_case"
-- para construirmos nossos bancos de dados e tabelas.

DROP SCHEMA IF EXISTS trybe_flix;
CREATE SCHEMA trybe_flix;
USE trybe_flix;

-- Primeiro criamos a tabela actor
CREATE TABLE actor(
    actor_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- E a tabela film
CREATE TABLE film(
    film_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

-- E por fim, a tabela film_actor com a relação N:N

CREATE TABLE film_actor(
  actor_id INTEGER,
  film_id INTEGER,
  CONSTRAINT PRIMARY KEY(actor_id, film_id),
    FOREIGN KEY (actor_id) REFERENCES actor (actor_id),
    FOREIGN KEY (film_id) REFERENCES film (film_id)
);
