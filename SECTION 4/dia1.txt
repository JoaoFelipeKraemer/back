M√≥dulos Node

Anota a√≠ üñä: um m√≥dulo em Node.js √© um ‚Äúpeda√ßo de c√≥digo‚Äù, o qual pode ser organizado em um ou mais arquivos,
 que possui escopo pr√≥prio. Ou seja, suas vari√°veis, fun√ß√µes, classes e afins s√≥ est√£o dispon√≠veis nos arquivos
  que fazem parte daquele m√≥dulo.
Em outras palavras, um m√≥dulo √© uma funcionalidade, ou um conjunto de funcionalidades, que se
 encontram isoladas do restante do c√≥digo. O Node.js possui tr√™s tipos de m√≥dulos: internos, locais e de terceiros.
=================
 M√≥dulos internos
Os m√≥dulos internos (ou core modules) s√£o inclusos no Node.js e instalados junto com ele quando baixamos o 
runtime. Alguns exemplos de core modules s√£o:

 fs: fornece uma API para interagir com o sistema de arquivos de forma geral;

url: prov√™ utilit√°rios para ler e manipular URLs;

util: oferece ferramentas e funcionalidades comumente √∫teis a pessoas programadoras.

os: oferece ferramentas e funcionalidades relacionadas ao sistema operacional.

==============

M√≥dulos locais
Os m√≥dulos locais s√£o aqueles definidos juntamente √† nossa aplica√ß√£o. Eles representam
as funcionalidades ou partes do nosso programa que foram separados em arquivos
diferentes. Podem ser publicados no NPM, para que outras pessoas possam baix√°-los e
utiliz√°-los, o que nos leva ao nosso pr√≥ximo e √∫ltimo tipo de m√≥dulo

====================

M√≥dulos de terceiros

Os m√≥dulos de terceiros s√£o aqueles criados por outras pessoas desenvolvedoras e
disponibilizados para uso por meio do npm. N√≥s tamb√©m podemos criar e publicar nossos
pr√≥prios m√≥dulos, seja para utilizarmos em diversas aplica√ß√µes diferentes, seja para permitir que outras pessoas os utilizem.
 Veremos como fazer isso adiante, para isso continue a leitura.

 =========

 NPM-- NODE PACKAGE MANAGER

 NOS PERMITE INSTALAR E GERENCIAR MODULOS CRIADOS POR OUTRAS PESSOAS EM NOSSA APLICA√á√ÉO

 ---------
 const path = require('path');
 log(path.dirname) = passa caminho e  extrai o nome do diretorio
 log(path.resolve) = passa conjunto de nome para gerar um caminho

 -------------------

 Maneiras de importar e exportar m√≥dulos

Quando queremos utilizar o conte√∫do de um m√≥dulo ou pacote de outro arquivo no Node.js, 
precisamos importar esse m√≥dulo/pacote para o contexto atual no qual estamos.

Para isso, existem dois sistemas de m√≥dulos difundidos na comunidade JavaScript:

M√≥dulos ES6 e M√≥dulos CommonJS.;

=================
ES6
Nessa especifica√ß√£o, os m√≥dulos s√£o importados utilizando a palavra-chave import, tendo como 
contrapartida a palavra-chave export para export√°-los.

Transpiladores s√£o ferramentas que leem o c√≥digo-fonte escrito em uma linguagem como o Node.js e
 produzem o c√≥digo equivalente em outra linguagem.

Supersets s√£o linguagens que utilizam um transpilador para adicionar novas funcionalidades ao JavaScript.
===================
M√≥dulos CommonJS.

No CommonJS as palavras-chaves utilizadas para importa√ß√£o e exporta√ß√£o de m√≥dulos s√£o, respectivamente, require() e module.exports.

Para exportar algo no sistema CommonJS, utilizamos a vari√°vel global module.exports, atribuindo a ela o valor que desejamos exportar:
// brlValue.js
const brl = 5.37;

module.exports = brl;

Como vimos anteriormente, um m√≥dulo possui um escopo isolado, 
ou seja, suas fun√ß√µes, vari√°veis, classes e demais defini√ß√µes existem somente dentro do m√≥dulo.

module.exports  pode receber qualquer valor v√°lido em JavaScript, incluindo objetos, classes, fun√ß√µes e afins.
