

 : Rotas podem ser chamadas de caminhos, paths e endpoints de uma API.

  No contexto de Back-end, rotas representam as portas de entrada para a sua API.

  ANATAOMIA DA URL:

  https       ://    app.betrybe.com       /login
  PROTOCOLO   WTF      DOMINIO                ROTA


uma rota √© a parte de uma URL que usamos para acessar uma API e fazer uma requisi√ß√£o a ela. Por meio
da rota, na nossa aplica√ß√£o, requisitaremos acesso, cria√ß√£o, leitura ou 
remo√ß√£o de informa√ß√µes da nossa API de gerenciamento de times.
Em suma, quando voc√™ digita uma URL no navegador, por ‚Äútr√°s dos panos‚Äù ele est√° fazendo 
uma requisi√ß√£o √†quela rota. Quando uma aplica√ß√£o Front-end faz uma requisi√ß√£o para uma URL,
ela quer algo de alguma rota da API. Precisamos saber como as requisi√ß√µes chegam para podermos 
criar nossas pr√≥prias rotas e process√°-las!



// src/app.js

// const express = require('express');

// const app = express();

app.get('/', (req, res) => res.status(200).json({ message: 'Ol√° Mundo!' }));

// module.exports = app;



Observe que a fun√ß√£o get recebe dois par√¢metros:

1¬∞ par√¢metro '/': Aqui √© rota que tanto falamos. Podem ser /login, /produtos, /pessoas, ou 
qualquer outra coisa! Neste caso, colocamos apenas /.
Chamamos a rota / de rota raiz;

2¬∞ par√¢metro (req, res) => {}: Este espera uma fun√ß√£o de callback. Esta fun√ß√£o pode receber de 2 a 4 par√¢metros, sendo eles:
req: Essa √© a Request (ou requisi√ß√£o), √© por meio dela que recebemos os dados (envio por query, params e body);
res: Essa √© a Response (ou resposta), √© por meio dela que respondemos o que nos √© solicitado;
next: N√£o vamos trabalhar com ele nesta aula;
err: N√£o vamos trabalhar com ele nesta aula.
Essa fun√ß√£o √© respons√°vel por responder nossas requisi√ß√µes. Ent√£o, observe o trecho res.status(200).json({ message: 'Ol√° Mundo!' })
 e reflita sobre o que cada coisa deve significar.

res como comentado, responde as requisi√ß√µes. Estas requisi√ß√µes podem ser respondidas de v√°rios jeitos, tais como:
Formato text/JSON, como o caso do res.json({ message: 'Ol√° Mundo!' });
Formato text/HTML, como o caso do res.send('<h1>Ol√° Mundo!</h1>');
Redirecionamentos, como o caso do res.redirect('https://www.betrybe.com/');
P√°ginas completas ou partes dela, como o caso do res.render('index.html');
Finalizando, como o caso do res.end();


Os status code mais conhecidos s√£o:

200: Que quer dizer ‚Äòok‚Äô;
500: Que quer dizer erro no servidor;
404: Este muitas pessoas j√° viram, ele quer dizer que a p√°gina n√£o foi encontrada;
De olho na dica üëÄ: associe os status a constantes nomeadas, desse modo voc√™ facilita a leitura! const OK = 200, 
const INTERNAL_SERVER_ERROR = 500 e const NOT_FOUND = 404 s√£o √≥timos come√ßos!

=-=-=---==--==-=-=-=-==

Anatomia de requisi√ß√µes: o protocolo HTTP

GET / HTTP/1.1
Host: developer.mozilla.org
Accept: text/html

Vejamos quais s√£o as informa√ß√µes presentes nessa requisi√ß√£o:

O m√©todo HTTP: definido por um verbo em ingl√™s. Nesse caso, utilizamos o GET, 
que normalmente √© utilizado para ‚Äúbuscar‚Äù algo do servidor,
 e √© tamb√©m o m√©todo padr√£o executado por navegadores quando acessamos uma URL.

O caminho no servidor do recurso que estamos tentando acessar: Nesse caso, o caminho √© /, 
pois estamos acessando a p√°gina inicial da aplica√ß√£o;

A vers√£o do protocolo (1.1 √© a vers√£o nesse exemplo);

O local (host, ou ‚Äúhospedeiro‚Äù) onde est√° o recurso que se est√° tentando acessar: Ou seja, a URL! 
Ou, se for mais direto, o endere√ßo IP servidor.

Os headers, ou cabe√ßalhos: s√£o informa√ß√µes adicionais a respeito de uma requisi√ß√£o ou de uma resposta. 
Eles podem ser enviados do cliente para o servidor, ou vice-versa. Na requisi√ß√£o do exemplo acima, temos o
 header Host, o qual informa o endere√ßo do servidor e o header Accept, que informa o tipo de resposta a qual esperamos do servidor.


 Esses s√£o os dados transmitidos em uma request do tipo GET. No entanto, o GET n√£o √© o √∫nico m√©todo HTTP existente.
  Na verdade, existem 39 m√©todos diferentes! Os mais comuns s√£o: GET, PUT, POST, DELETE e PATCH, 
 al√©m do m√©todo OPTIONS, utilizado por clientes para entender como deve ser realizada a comunica√ß√£o com o servidor

 <<-Servidor recebe uma requisi√ß√£o ele envia resposta ->>

 HTTP/1.1 200 OK
Date: Sat, 09 Oct 2010 14:28:02 GMT
Server: Apache
Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT
ETag: "51142bc1-7449-479b075b2891b"
Accept-Ranges: bytes
Content-Length: 29769
Content-Type: text/html

<!DOCTYPE html... (aqui v√™m os 29769 bytes da p√°gina solicitada)


-----------------

E como uma requisi√ß√£o envia dados para o servidor?
Existem 3 formas de n√≥s enviarmos dados para um servidor, duas pela pr√≥pria URL e uma pelo corpo da requisi√ß√£o.

->Envio por consulta, ou req.query

Quando pesquisamos algo no Google, usamos esse m√©todo!

Constru√ß√£o: /rota?variavel1=valor&variavel1=valor&variavelN=valor
Explica√ß√£o:
/rota √© o caminho, por exemplo, /produtos, /pessoas, /pesquisa, ‚Ä¶;
? √© o indicador que vamos passar dados em para a rota;
& √© o separador que se usa quando queremos enviar muitos dados;
variavelN √© uma chave identificadora, por exemplo, nome, frequenciaMinima, q, ‚Ä¶;
valor √© o valor da vari√°vel, por exemplo, nome=Tobias, frequenciaMinima=144, q=express, ‚Ä¶;

->Envio por par√¢metro ou req.params

Esse exemplo √© mais vis√≠vel em e-commerces ou sites que t√™m produtos cadastrados.

Constru√ß√£o: /rota/:variavelN
Explica√ß√£o:
/rota √© o caminho, por exemplo, /produto, /pessoa,, ‚Ä¶;
/: √© o indicador que vamos passar um dado para a rota;
variavelN √© uma chave identificadora, por exemplo, id, ‚Ä¶; (aqui geralmente passamos ids mas n√£o se restringe a isso)

-> Envio por corpo ou req.body

Sabe quando preenchemos um formul√°rio de pagamento ap√≥s uma compra online ou entramos no course 
com nosso e-mail e senha? A√≠ est√° o envio de informa√ß√µes pelo corpo da requisi√ß√£o.

Tamb√©m chamamos esse envio de envio tipo POST os outros 2 sao GET