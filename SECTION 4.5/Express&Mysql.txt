Faremos um projeto.

msql no docker

Chegou o grande momento no qual voc√™ realizar√° consultas a um banco 
de dados MySQL por meio de uma API REST desenvolvida com o aux√≠lio do Express.

Al√©m disso, colocaremos Docker nessa receita! Ou melhor, criaremos
 uma receita com o docker compose que permitir√° o uso do MySQL dentro de um container Docker!

 ->Voc√™ criar√° um docker compose que iniciar√° um ambiente com o container MySQL que voc√™ utilizar√° ao longo do dia. üòé

 ->Na raiz do projeto (diret√≥rio trybecash-api), vamos criar o arquivo docker-compose.yaml com o seguinte conte√∫do:

Configurando o MySQL no Express
->Primeiramente, vamos instalar as depend√™ncias necess√°rias para configurarmos um projeto Express 
capaz de conectar ao MySQL. No diret√≥rio raiz do projeto, execute o seguinte comando:

npm i express@4.17.1 mysql2@2.3.3 --save-exact


-> Precisaremos criar em nossa aplica√ß√£o o arquivo src/db/connection.js, que ser√° respons√°vel por realizar a conex√£o com o 
servidor MySQL utilizando a biblioteca mysql2:


Para come√ßar, vamos instalar as depend√™ncias necess√°rias para escrevermos nossos testes de integra√ß√£o.
 Ent√£o, execute o seguinte comando para realizar a instala√ß√£o das depend√™ncias mocha, chai, sinon e chai-http 
 como depend√™ncias de desenvolvimento:
 npm i mocha@10.0.0 chai@4.3.6 sinon@14.0.0 chai-http@4.3.0 -D



 ===================
Que tal come√ßarmos criando uma pessoa no banco de dados? Ent√£o antes de escrever o teste e, 
consequentemente, nosso c√≥digo, vamos entender o fluxo de cadastro de pessoas que iremos implementar.

O fluxo se dar√° da seguinte maneira:

Primeiramente receberemos uma requisi√ß√£o para o endpoint POST /people. Essa requisi√ß√£o
 ter√° no seu corpo um JSON com os dados a serem cadastrados no banco de dados similar ao seguinte:
{
  "firstName": "Luke",
  "lastName": "Skywalker",
  "email": "luke.skywalker@trybe.com",
  "phone": "851 678 4453"
}

Em seguida, o express passar√° o JSON recebido na requisi√ß√£o para um componente de software (o qual iremos desenvolver üòâ)
 que ir√° enviar uma declara√ß√£o SQL INSERT para o MySQL;

Ap√≥s o envio do comando SQL inser√ß√£o da pessoa no MySQL, receberemos uma resposta do MySQL sobre a opera√ß√£o;

Enviamos a resposta para a requisi√ß√£o com o c√≥digo de estado 201 se a opera√ß√£o ocorreu com sucesso, ou o c√≥digo
 de estado 500 caso algum erro ocorrer durante o processo de cadastro da pessoa no MySQL.
================================
//  tests/integration/people.test.js

const chai = require('chai');
const chaiHttp = require('chai-http');
const sinon = require('sinon');

const app = require('../../src/app');
const connection = require('../../src/db/connection');

const { expect, use } = chai;

use(chaiHttp);

describe('Testando os endpoints de people', function () {
  it('Testando o cadastro de uma pessoa ', async function () {
    sinon.stub(connection, 'execute').resolves([{ insertId: 42 }]);

    const response = await chai
      .request(app)
      .post('/people')
      .send(
        {
          firstName: 'Luke',
          lastName: 'Skywalker',
          email: 'luke.skywalker@trybe.com',
          phone: '851 678 4453',
        },
      );

    expect(response.status).to.equal(201);
    expect(response.body).to.
      deep.equal({ message: 'Pessoa cadastrada com sucesso com o id 42' });
  });

  afterEach(sinon.restore);
});

================

Com esse c√≥digo ACIMA, fazemos as importa√ß√µes necess√°rias para realizar os testes de integra√ß√£o.

Em seguida s√£o criadas as vari√°veis app e connection que fazem refer√™ncia aos m√≥dulos src/app.js e src/db/connection.js. 
Teremos apenas um describe que agrupar√° os testes relacionados ao endpoint people.

Dentro do describe criado, temos um caso de teste (declara√ß√£o it) que realiza duas tarefas:

Cria um stub com o sinon na fun√ß√£o execute de connection, de maneira que quando essa fun√ß√£o for chamada no teste,
 ela retornar√° um array contendo um objeto com a chave insertId com o valor 42.

Uma requisi√ß√£o ao endpoint POST /people passando um JSON com os dados da pessoa a ser cadastrada no corpo da requisi√ß√£o.


Dica:  caso tenha curiosidade em saber como s√£o os testes da biblioteca mysql2  https://github.com/sidorares/node-mysql2

Em resumo: s√≥ precisamos testar o comportamento da nossa aplica√ß√£o at√© a chamada 
da fun√ß√£o connection.execute() (que criamos o mock), que retornar√° um resultado conhecido e, 
de posse desse resultado, verificar√° se a aplica√ß√£o gera a resposta apropriada.
=========================
Para podermos executar o nosso teste (e vermos ele falhar üòõ), temos que alterar a chave test dos scripts do package.json:

{
  ...
  "scripts": {
    ...
    "test": "mocha tests/**/*$NAME*.test.js --exit"
  },
  ...
}


npm test


O erro apresentado est√° nos informando que o nosso teste esperava receber um c√≥digo de estado 201, mas ele 
recebeu o c√≥digo 404. Isso ocorre porque n√£o criamos ainda o endpoint /people!
